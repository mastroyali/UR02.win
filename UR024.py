import pywinusb.hid as hid
import base64
import customtkinter as ctk
import tkinter as tk
from PIL import Image, ImageTk
from io import BytesIO
import time
import keyboard
import json
import os
import threading

encoded_image = "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ACiiigAooooAKKKKACiiigAooooAKKKKACg9vqKKD2+ooA0dN/49z/vGijTf+Pc/7xooAzh3+pooHf6migAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAoxnj1opRxQBNbnMKn1rj7/AvrjHA8xsfnXYW4xCo9K4+9z9snz18xv50AQUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAb3hf8A5ef+A/1rVl/1hrK8L/8ALz/wH+tasv8ArDQAyiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACg9vqKKD2+ooA0dN/wCPc/7xoo03/j3P+8aKAM4d/qaKB3+pooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKCcCgCeDmJeMdf51x97/wAfk+evmN/Ouvt1KocnOTmuW1mNY9TnCjAJB/EgE/zoApUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAb3hf/AJef+A/1rVl/1hrK8L/8vP8AwH+tasv+sNADKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKD2+oooPb6igDR03/j3P+8aKNN/49z/vGigDOHf6migd/qaKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAClHXnpSUvI6HB9aAFteG65BXr9P/wBdYniSDy7pJRjEi498j/8AWK2clcMNxK9h1NN1Wy+32ZVfvr8ye59KAORooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooqSCBrmZIkGWY4FAHReHItlizlQC7kg9yBx/PNXG+8frS+UltapCpCIMLk+nfP1/rTMhuQQQe4oAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKD2+oooPb6igDR03/j3P+8aKNN/49z/vGigDOHf6migd/qaKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigBQMnHXNNgnES5Y/J/ExP3T/hSkAjBzj2pm0qp+Y9OccZoApaxovml7iDJcnLR+v09/51z9dfHN9nRQqbox2HG3/wCt/KkudPtdRyWXEn95flb8fy70AcjRW3L4YkC/u51Zs9GXaP61F/wjV1/z0i/M/wCFAGTRWt/wjV1/z0i/M/4Uf8I1df8APSL8z/hQBk0Vrf8ACNXX/PSL8z/hR/wjV1/z0i/M/wCFAGTRWt/wjV1/z0i/M/4Uf8I1df8APSL8z/hQBk0Vrf8ACNXX/PSL8z/hR/wjV1/z0i/M/wCFAGTRWt/wjV1/z0i/M/4Uf8I1df8APSL8z/hQBk0Vrf8ACNXX/PSL8z/hR/wjV1/z0i/M/wCFAGTRWt/wjV1/z0i/M/4Vbj8OQQ5eecsi8n+EADrmgDDt7aW7k8uJC7YzgV0+m6ammxZ+/O3BYfyFTQNDAuyCI+WACSg4wcYOe/4ZprF3UrIQwzyvY+3HOPpg0AL5nmEOD1HB9qQDAoooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKD2+oooPb6igDR03/j3P+8aKNN/49z/ALxooAzh3+pooHf6migAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAEwc5yQfUcUo3KoAbDYxuA5+vp+lFFAANy/dkcfU5/nQWl/56kfgKKKAAtIf+WrL/ugf1FKXkPSQj8B/hSUU7gG6T/nofyFLvkx/rDn1wKSikAZk/57N+IX/CgtJ2lI/Af4UUUAIWlP/LYj6KKMy/8APZvyX/Clop3AafNP/Ld1+gX+opcyf89n/EL/AIUtFIBCZT/y3cfgv+FLmUf8tmP1C/4UUUrAAMgOTM59sLj+VBJZsljjrwTRRTAQrySMLn0Apf0oooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACg9vqKKD2+ooA0dN/wCPc/7xoo03/j3P+8aKAM4d/qaKRW68N19KXPs35UAFFGfZvyoz7N+VABRRn2b8qM+zflQAUUZ9m/KjPs35UAFFGfZvyoz7N+VABRRn2b8qM+zflQAUUZ9m/KjPs35UAFFGfZvyoz7N+VABRRn2b8qM+zflQAUUZ9m/KjPs35UAFFGfZvyoz7N+VABRRn2b8qM+zflQAUUZ9m/KjPs35UAFFGfZvyoz7N+VABRRn2b8qM+zflQAUUZ9m/KjPs35UAFFGfZvyoz7N+VABRRn2b8qM+zflQAUUZ9m/KjPs35UAFFGfZvyoz7N+VABRRn2b8qM+zflQAUUZ9m/KjPs35UAFFGfZvyoz7N+VABRRn2b8qM+zflQAUUZ9m/KjPs35UAFFGfZvyoz7N+VABRRn2b8qM+zflQAUUZ9m/KjPs35UAFFGfZvyoz7N+VABRRn2b8qM+zflQAUUZ9m/KjPs35UAFFGfZvyoz7N+VABRRn2b8qM+zflQAUUZ9m/KjPs35UAFFGfZvyoz7N+VABRRn2b8qM+zflQAUUZ9m/KjPs35UAFFGfZvyoz7N+VABRRn2b8qM+zflQAUUZ9m/KjPs35UAFFGfZvyoz7N+VABRRn2b8qM+zflQAUUZ9m/KjPs35UAFFGfZvyoz7N+VABQe31FGfZvypGbpw3X0oA0tN/49z/ALxopumt/o5+VvvHtRQALpsXzcv1/vU7+zYvV/8AvqiigA/s2L1f/vqj+zYvV/8AvqiigA/s2L1f/vqj+zYvV/8AvqiigA/s2L1f/vqj+zYvV/8AvqiigA/s2L1f/vqj+zYvV/8AvqiigA/s2L1f/vqj+zYvV/8AvqiigA/s2L1f/vqj+zYvV/8AvqiigA/s2L1f/vqj+zYvV/8AvqiigA/s2L1f/vqj+zYvV/8AvqiigA/s2L1f/vqj+zYvV/8AvqiigA/s2L1f/vqj+zYvV/8AvqiigA/s2L1f/vqj+zYvV/8AvqiigA/s2L1f/vqj+zYvV/8AvqiigA/s2L1f/vqj+zYvV/8AvqiigA/s2L1f/vqj+zYvV/8AvqiigA/s2L1f/vqj+zYvV/8AvqiigA/s2L1f/vqj+zYvV/8AvqiigA/s2L1f/vqj+zYvV/8AvqiigA/s2L1f/vqj+zYvV/8AvqiigA/s2L1f/vqj+zYvV/8AvqiigA/s2L1f/vqj+zYvV/8AvqiigA/s2L1f/vqj+zYvV/8AvqiigA/s2L1f/vqj+zYvV/8AvqiigA/s2L1f/vqj+zYvV/8AvqiigA/s2L1f/vqj+zYvV/8AvqiigA/s2L1f/vqj+zYvV/8AvqiigA/s2L1f/vqj+zYvV/8AvqiigA/s2L1f/vqj+zYvV/8AvqiigA/s2L1f/vqj+zYvV/8AvqiigA/s2L1f/vqj+zYvV/8AvqiigA/s2L1f/vqj+zYvV/8AvqiigA/s2L1f/vqj+zYvV/8AvqiigA/s2L1f/vqj+zYvV/8AvqiigA/s2L1f/vqj+zYvV/8AvqiigA/s2L1f/vqj+zYvV/8AvqiigA/s2L1f/vqj+zYvV/8AvqiigA/s2L1f/vqj+zYvV/8AvqiigA/s2L1f/vqj+zYvV/8AvqiigA/s2L1f/vqj+zYvV/8AvqiigA/s2L1f/vqj+zYvV/8AvqiigA/s2L1f/vqj+zYvV/8AvqiigA/s2L1f/vqj+zYvV/8AvqiigA/s2L1f/vqj+zYvV/8AvqiigA/s2L1f/vqj+zYvV/8AvqiigA/s2L1f/vqmtpsXy8v1/vUUUAaOmaZF9nPL/ePeiiigD//Z"

# Decoding imgge
image_data = base64.b64decode(encoded_image)
image = Image.open(BytesIO(image_data))


current_device = None
last_device_index = None
unique_events = set()
config_file = "hid_config.json"

circle_coords = {
    "B1": [303, 65, 323, 85], "B2": [302, 314, 322, 334], "B3": [355, 178, 375, 198],
    "B4": [303, 128, 323, 148], "B5": [354, 219, 374, 239], "B6": [315, 559, 335, 579],
    "B7": [302, 371, 322, 391], "B8": [312, 220, 332, 240], "B9": [396, 220, 416, 240],
    "B10": [302, 430, 322, 450], "B11": [315, 475, 335, 495], "B12": [355, 261, 375, 281],
    "B13": [354, 341, 374, 361], "B14": [392, 516, 412, 536], "B15": [406, 314, 426, 334],
    "B16": [393, 559, 413, 579], "B17": [314, 517, 334, 537], "B18": [392, 474, 412, 494]
}

circle_ids = {}
circle_texts = {}
circle_values = {}

auto_connect_enabled = False

def load_config():
    global circle_values, last_device_index, unique_events, auto_connect_enabled
    if os.path.exists(config_file):
        with open(config_file, "r") as file:
            config = json.load(file)
            last_device_index = config.get("last_device_index")
            unique_events = set(config.get("unique_events", []))
            auto_connect_enabled = config.get("auto_connect_enabled", False)
            circle_values = config.get("circle_values", {})
    else:
        circle_values = {}

load_config()

def save_config():
    config = {
        "last_device_index": last_device_index,
        "unique_events": list(unique_events),
        "auto_connect_enabled": auto_connect_enabled,
        "circle_values": circle_values,
    }
    with open(config_file, "w") as file:
        json.dump(config, file)

def read_hid_input(data):
    global unique_events
    try:
        button_number = data[0]
        event_data = ' '.join(f'{byte:02X}' for byte in data[1:])
        button_value = event_data[:2]
        unique_events.add(event_data)
        save_config()
        highlight_circle(button_value)
        update_last_event_display(event_data)
    except Exception as e:
        print(f"Error input data: {e}")

def highlight_circle(button_value):
    for circle_id, circle_value in circle_ids.items():
        if circle_values.get(circle_value) == button_value:
            canvas.itemconfig(circle_id, fill="green")
            threading.Thread(target=emulate_keypress_or_mouse, args=(circle_value,)).start()
        else:
            canvas.itemconfig(circle_id, fill="")

def list_hid_devices():
    devices = hid.HidDeviceFilter().get_devices()
    if not devices:
        print("HID-device not found")
        return []
    return devices

def get_device_name(device):
    try:
        device_name = f"{device.vendor_name} {device.product_name}" if device.vendor_name else device.product_name
        return device_name[:50]
    except AttributeError:
        return "Unknown device"
##################################################
key_mapping = {
    "B1": "Escape",  
    "B2": "Backspace",
    "B3": "up",
    "B12": "down",
    "B5": "Return",
    "B8": "Left", 
    "B9": "Right",
}
##################################################
def emulate_keypress_or_mouse(circle_value):
    mapped_key = key_mapping.get(circle_value)
    if mapped_key:
        first_impulse = True
        while True:
            circle_id = None
            for cid, cvalue in circle_ids.items():
                if cvalue == circle_value:
                    circle_id = cid
                    break
            if circle_id is None:
                return

            if canvas.itemcget(circle_id, 'fill') == "green":
                keyboard.press(mapped_key)
                time.sleep(0.01)
                keyboard.release(mapped_key)

                if first_impulse:
                    time.sleep(0.5)
                    first_impulse = False
                else:
                    time.sleep(0.05)
            else:
                break

def start_monitoring():
    global current_device, last_device_index
    selected_device_index = device_var.get()
    try:
        selected_device_index = int(selected_device_index.split('.')[0])
    except ValueError:
        return

    if current_device:
        stop_monitoring()

    device = devices[selected_device_index]
    try:
        print(f"Connect to device: {get_device_name(device)}")
        device.open()
        device.set_raw_data_handler(read_hid_input)
        current_device = device
        last_device_index = selected_device_index
        save_config()
        toggle_connection_button()
    except Exception as e:
        print(f"Connect error: {e}")

def stop_monitoring():
    global current_device
    if current_device:
        try:
            print(f"Device is off: {get_device_name(current_device)}")
            current_device.close()
        except Exception as e:
            print(f"Disconnect error: {e}")
        finally:
            current_device = None
            toggle_connection_button()

def toggle_connection_button():
    if current_device:
        start_button.configure(text="Disconnect", fg_color="gray", command=stop_monitoring)
    else:
        start_button.configure(text="Connect", fg_color="green", command=start_monitoring)

def auto_connect():
    global last_device_index
    if last_device_index is not None:
        try:
            device_var.set(f"{last_device_index}. {get_device_name(devices[last_device_index])}")
            start_monitoring()
        except Exception as e:
            print(f"Autoconnect error: {e}")

root = ctk.CTk()
root.title("UR-02+")
root.resizable(False, False)

devices = list_hid_devices()

bg_image = image.resize((724, 724), Image.Resampling.LANCZOS)
bg_photo = ImageTk.PhotoImage(bg_image)

canvas = tk.Canvas(root, width=724, height=724)
canvas.create_image(0, 0, image=bg_photo, anchor="nw")
canvas.grid(row=1, column=0, columnspan=4, padx=0, pady=0) #sticky="nsew") 

device_var = ctk.StringVar(root)

def draw_circles():
    unique_id = 1
    for circle_value, coords in circle_coords.items():
        x0, y0, x1, y1 = coords
        circle_id = canvas.create_oval(x0, y0, x1, y1, fill="", tags="circle")
        circle_text = canvas.create_text((x0 + x1) // 2, (y0 + y1) // 2, text=f"{circle_value}", fill="black")
        circle_ids[circle_id] = circle_value
        circle_texts[circle_id] = circle_text
        circle_coords[circle_value] = (x0, y0, x1, y1)

        if circle_value not in circle_values:
            circle_values[circle_value] = "00"

        if circle_value in circle_values:
            canvas.itemconfig(circle_texts[circle_id], text=circle_values[circle_value])

        canvas.create_rectangle(x0, y0, x1, y1, outline="", fill="", tags=f"area_{circle_id}")
        canvas.tag_bind(f"area_{circle_id}", "<Button-1>", lambda event, circle_id=circle_id: on_circle_click(event, circle_id))

        # tips
        canvas.tag_bind(f"area_{circle_id}", "<Enter>", lambda event, circle_value=circle_value: show_tooltip(event, circle_value))
        canvas.tag_bind(f"area_{circle_id}", "<Leave>", hide_tooltip)

        unique_id += 1

def show_tooltip(event, circle_value):
    x0, y0, x1, y1 = circle_coords[circle_value]
    center_x = (x0 + x1) // 2
    center_y = y0 + 65  
    tooltip_label.configure(text=f"{circle_value}")  
    tooltip_label.place(x=center_x, y=center_y)

def hide_tooltip(event):
    tooltip_label.place_forget()  

def on_circle_click(event, circle_id):
    x0, y0, x1, y1 = circle_coords[circle_ids[circle_id]]
    current_value = circle_values.get(circle_ids.get(circle_id), "Not define")
    
    canvas.itemconfig(circle_id, fill="yellow")
    root.after(3000, lambda: canvas.itemconfig(circle_id, fill=""))

    if last_event_display.cget("text") != "00":
        new_value = last_event_display.cget("text")
        circle_values[circle_ids[circle_id]] = new_value
        canvas.itemconfig(circle_texts[circle_id], text=new_value)
        save_config()

last_event_display = ctk.CTkLabel(root, text="--", text_color="blue")

def update_last_event_display(event_data):
    last_event_display.configure(text=event_data[:2])

device_names = [f"{i}. {get_device_name(device)}" for i, device in enumerate(devices)]
device_menu = ctk.CTkOptionMenu(root, variable=device_var, values=device_names)

start_button = ctk.CTkButton(root, text="Connect", fg_color="green", command=start_monitoring)

tooltip_label = tk.Label(root, bg="yellow", font=("Arial", 10), relief="solid", bd=1, padx=5, pady=5)


##############################-ENTRY "in the future"-####################################

def open_key_mapping_window():
    """Setting Key Mapping."""
    key_mapping_window = tk.Toplevel(root)
    key_mapping_window.title("Setting Key Mapping")
    key_mapping_window.geometry("400x400")
    key_mapping_window.resizable(False, False)

    # title
    tk.Label(key_mapping_window, text="Setting Key Mapping", font=("Arial", 14)).pack(pady=10)

    dropdown_vars = {}

    # list of keys 
    available_keys = [
        "Space", "Backspace", "Enter", "Tab", "Shift", "Ctrl", "Alt", "Esc",
        "up", "down", "left", "right", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j",
        "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z",
        "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"
    ]

    # lists
    for circle_value, key in key_mapping.items():
        frame = tk.Frame(key_mapping_window)
        frame.pack(pady=5, fill="x", padx=20)

        tk.Label(frame, text=circle_value, width=10, anchor="w").pack(side="left")

        dropdown_var = tk.StringVar(value=key)
        dropdown_vars[circle_value] = dropdown_var

        dropdown = tk.OptionMenu(frame, dropdown_var, *available_keys)
        dropdown.pack(side="right", fill="x", expand=True)

    def save_key_mapping():
        """Save key_mapping."""
        for circle_value, dropdown_var in dropdown_vars.items():
            key_mapping[circle_value] = dropdown_var.get()
        save_config()  # save
        key_mapping_window.destroy()

    # Кнопка сохранения
    tk.Button(key_mapping_window, text="Save", command=save_key_mapping).pack(pady=20)

def show_settings_tooltip(event):
    """Show tips."""
    tooltip_label.configure(text="In full version")
    tooltip_label.place(x=settings_button.winfo_rootx() - root.winfo_rootx() - 75, 
                        y=settings_button.winfo_rooty() - root.winfo_rooty() - 5)

def hide_settings_tooltip(event):
    """Hide tips."""
    tooltip_label.place_forget()

# Setting button
settings_button = ctk.CTkButton(
    root, 
    text="⚙", 
    width=30, 
    height=30, 
    fg_color="gray", 
    text_color="white", 
    #command=open_key_mapping_window
)
settings_button.grid(row=0, column=3, padx=2, pady=2)
settings_button.bind("<Enter>", show_settings_tooltip)
settings_button.bind("<Leave>", hide_settings_tooltip)

# label tips
tooltip_label = tk.Label(
    root, 
    bg="yellow", 
    font=("Arial", 10), 
    relief="solid", 
    bd=1, 
    padx=5, 
    pady=2
)

##############################-END "in the future"-####################################


device_menu.grid(row=0, column=0, padx=2, pady=2)
start_button.grid(row=0, column=1, padx=2, pady=2)
last_event_display.grid(row=0, column=2, padx=2, pady=2)
draw_circles()

auto_connect()
root.mainloop()

